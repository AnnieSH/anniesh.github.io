{"version":3,"sources":["menu/menu.js","home/section.js","home/home.js","App.js","serviceWorker.js","index.js"],"names":["MenuBtn","props","className","id","onClick","label","IconBtn","children","Menu","class","this","homeScroll","projectsScroll","hobbiesScroll","gotoGithub","gotoLinkedIn","window","open","React","Component","Section","Typography","variant","ref","sectionRef","title","Home","AVATAR_SRC","parallax","scrollTo","pages","homeRef","style","backgroundColor","offset","alignItems","flexDirection","display","justifyContent","speed","Avatar","alt","src","Card","CardContent","align","gutterBottom","projectsRef","factor","hobbyRef","App","createRef","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db61ac43.chunk.js","sourcesContent":["import React from 'react'\nimport LinkedInIcon from '@material-ui/icons/LinkedIn'\nimport GitHubIcon from '@material-ui/icons/GitHub'\n\nclass Menu extends React.Component {\n  render() {\n    return (\n      <div class='menu'>\n        <span id='left-menu'>\n          <MenuBtn id='home-btn' label='Annie Hu' onClick={this.props.homeScroll}/>\n          <MenuBtn id='projects-btn' label='Projects' onClick={this.props.projectsScroll}/>\n          <MenuBtn id='hobby-btn' label='Hobbies' onClick={this.props.hobbiesScroll}/>\n        </span>\n        <span id='right-menu'>\n          <IconBtn id='github-btn' onClick={this.gotoGithub}><GitHubIcon/></IconBtn>\n          <IconBtn id='linkedin-btn' onClick={this.gotoLinkedIn}><LinkedInIcon/></IconBtn>\n        </span>\n      </div>\n    );\n  };\n\n  gotoLinkedIn() {\n    window.open('https://www.linkedin.com/in/annie-hu-81755ba0');\n  }\n\n  gotoGithub() {\n    window.open('https://github.com/AnnieSH');\n  }\n}\n\nfunction MenuBtn(props) {\n  return (\n    <span className='menu-btn' id={props.id} onClick={props.onClick}>\n      {props.label}\n    </span>\n  );\n}\n\nfunction IconBtn(props) {\n  return (\n    <span className='icon-btn' onClick={props.onClick}>\n      {props.children}\n    </span>\n  )\n}\n\nexport default Menu;","import React from 'react';\nimport { Typography } from '@material-ui/core';\n// import Box from '@material-ui/core/Box'\n\nclass Section extends React.Component {\n  render() {\n    return (\n      <div class='section'>\n        <Typography variant=\"h2\" className=\"section-header\" ref={this.props.sectionRef}>{this.props.title}</Typography>\n        {this.props.children}\n      </div>\n    );\n  };\n}\n\nexport default Section;","import React from 'react'\nimport Section from './section'\nimport { Avatar, Card, CardContent, Typography } from '@material-ui/core'\nimport { Parallax, ParallaxLayer} from 'react-spring/renderprops-addons'\nimport Menu from '../menu/menu';\n\n\nclass Home extends React.Component {\n  AVATAR_SRC = \"https://media-exp1.licdn.com/dms/image/C5603AQFZ3jZm-K6YCw/profile-displayphoto-shrink_200_200/0?e=1602720000&v=beta&t=WUiBxcadwf8jplZ0osxc1GiFvYtdD5YpCVP6N0i6wvw\";\n\n  render() {\n    return (\n      <div>\n        <Menu\n          homeScroll={() => this.parallax.scrollTo(0)}\n          hobbiesScroll={() => this.parallax.scrollTo(2)}\n          projectsScroll={() => this.parallax.scrollTo(1)}/>\n\n        <Parallax className=\"home\" id=\"content\" pages={4} ref={ref => this.parallax = ref}>\n\n        <Section sectionRef={this.props.homeRef}>\n          <ParallaxLayer style={{backgroundColor: '#87BCDE'}} offset={0}>\n          </ParallaxLayer>\n          <ParallaxLayer\n           style={{alignItems: 'center', flexDirection: 'column', display: 'flex', justifyContent: 'center'}}\n           speed={0.3}\n           offset={0}>\n            <Avatar \n              className=\"profile-avatar\"\n              alt=\"Annie Hu\"\n              src={this.AVATAR_SRC}/>\n            <Card>\n              <CardContent>\n              <Typography variant=\"h1\">\n              Hello World\n            </Typography>\n            <Typography variant=\"subtitle1\" align='center' gutterBottom>\n              I'm Annie, a software developer specializing in both back-end and front-end development using Java, Scala, or Typescript.\n              I've done internships in a start-up, VFX company, and a videogame company doing, QA automation/testing, small projects, and back-end development.\n              I currently work at Electronics Arts in Vancouver, where I did my final internship, as a back-end software developer.\n            </Typography>\n              </CardContent>\n            </Card>\n\n          </ParallaxLayer>\n        </Section>\n\n        <Section sectionRef={this.props.projectsRef}>\n          <ParallaxLayer offset={1} style={{backgroundColor: '#a3e4d7'}}/>\n          <ParallaxLayer\n            offset={1}\n            speed={0.8}\n            factor={0.45}>\n            <img src=\"runtracker.jpg\" alt=\"Android app to track runs\"/>\n          </ParallaxLayer> <ParallaxLayer className='projects-section'\n            style={{display: 'flex', alignItems: 'center', flexDirection: 'column'}}\n            offset={1}\n            speed={0.3}>\n            <Card>\n              <CardContent>\n              <Typography variant=\"h1\">Projects</Typography>\n              <Typography variant=\"h4\">Run Tracker App</Typography>\n              <Typography variant=\"subtitle1\">\n                Run Tracker is an Android app written in Java that records your runs' path, length, speed, and other stats. Turns out - writing software does not encourage you to exercise.\n                Source code is in my GitHub.\n            </Typography>\n              </CardContent>\n            </Card>\n          </ParallaxLayer>\n\n        </Section>\n\n        <Section sectionRef={this.props.hobbyRef}>\n          <ParallaxLayer \n            offset={2} \n            style={{backgroundColor: '#f1948a'}}/>\n\n          <ParallaxLayer \n            style={{display: 'flex', alignItems: 'center', flexDirection: 'column'}}\n            offset={2}\n            speed={0.8}>\n            <Card>\n              <CardContent>\n                <img className=\"project-photo\" src=\"DSC0834-3.jpg\" alt=\"Yaletown-Roundhouse - Vancouver\"/>\n              </CardContent>\n            </Card>\n          </ParallaxLayer>\n          \n          <ParallaxLayer className=\"projects-section\"\n            style={{display: 'flex', alignItems: 'center', flexDirection: 'column'}}\n            speed={0.3}\n            offset={2}>\n\n            <Card>\n              <CardContent>\n                <Typography variant=\"h4\">Photography</Typography>\n                <Typography variant=\"subtitle1\">\n                  I shoot on a Sony A6000, taking pictures of the city, nature, and the occasional portrait.\n                </Typography>\n              </CardContent>\n            </Card>\n          </ParallaxLayer>\n\n\n\n          <ParallaxLayer\n            offset={3}\n            style={{backgroundColor: '#ccd1d1'}}/>\n       \n          <ParallaxLayer\n            style={{display: 'flex', alignItems: 'center', flexDirection: 'column'}}\n            offset={3}\n            speed={0.8}>\n            <Card>\n              <CardContent>\n                <img className=\"project-photo\" src=\"pokeball_02.jpg\" alt=\"Pokeball\"/>\n              </CardContent>\n            </Card>\n          </ParallaxLayer>\n\n          <ParallaxLayer className=\"project-section\"\n            style={{display: 'flex', alignItems: 'center', flexDirection: 'column'}}\n            speed={0.3}\n            offset={3}>\n            <Card>\n              <CardContent>\n                <Typography variant=\"h4\">3D Modeling</Typography>\n                <Typography variant=\"subtitle1\">\n                  I am currently learning Blender: a great open-source 3D modeling software. \n                </Typography>\n              </CardContent>\n            </Card>\n          </ParallaxLayer>\n        </Section>\n      </Parallax>\n      </div>\n    )\n  }\n\n}\n\nexport default Home","import React, { createRef } from 'react';\nimport Menu from './menu/menu';\nimport './App.css';\nimport Home from './home/home';\n\nfunction App() {\n  const homeRef = createRef();\n  const projectsRef = createRef();\n  const hobbyRef = createRef();\n\n  return (\n    <div className=\"App\">\n      <Home homeRef={homeRef} projectsRef={projectsRef} hobbyRef={hobbyRef}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}